-- Non-enhance logic
-- Write logs to the screen
function write_log(text)
	local text_node = gui.get_node("text_log")
	gui.set_text(text_node, text)
	print(text)
end

-- Interstitial Ad

local function on_interstitial_completed(self)
	write_log("Interstitial ad completed")
end

local function on_show_interstitial_requested(self)
	-- Check whether an interstitial ad is available

	if not enhance.isInterstitialReady() then
		write_log("Interstitial ad is not ready")
	else
	-- The ad is ready, set optional callback & show the ad

		enhance.setInterstitialCallback(on_interstitial_completed)
		enhance.showInterstitial()
		write_log("Showing interstitial ad")
	end
end

-- Rewarded Ad

local function on_reward_granted(self, reward_value, reward_type)
	write_log("Reward granted")
end

local function on_reward_declined(self)
	write_log("Reward declined")
end

local function on_reward_unavailable(self)
	write_log("Reward unavailable")
end

local function on_show_rewarded_requested(self)
	-- Check whether a rewarded ad is available

	if not enhance.isRewardedAdReady() then
		write_log("Rewarded ad is not ready")
	else
	-- The ad is ready, display it

		enhance.showRewardedAd(on_reward_granted, on_reward_declined, on_reward_unavailable)
		write_log("Showing rewarded ad")
	end
end

-- Banner Ad

local function on_toggle_banner_requested(self)
	-- If any banner is already displayed, hide it

	if self.is_banner_ad_shown then
		self.is_banner_ad_shown = false
		enhance.hideBannerAd()
		write_log("Hiding banner ad")

	-- No banner is shown, check if any is available

	elseif not enhance.isBannerAdReady() then
		write_log("Banner ad is not ready")
	else
	-- Banner ad is ready, display it

		self.is_banner_ad_shown = true
		enhance.showBannerAd("bottom");
		write_log("Showing banner ad")

	-- This will display the ad in the bottom of the screen
	-- You can also change the position to "top"
	end
end

-- Offerwall

local function on_show_offerwall_requested(self)
	-- Show offerwall if available

	if not enhance.isOfferwallReady() then
		write_log("Offerwall is not ready")
	else
		enhance.showOfferwall()
		write_log("Showing offerwall")
	end
end

-- Special Offer

local function on_show_special_offer_requested(self)
	-- Show special offer if available

	if not enhance.isSpecialOfferReady() then
		write_log("Special offer is not ready")
	else
		enhance.showSpecialOffer()
		write_log("Showing special offer")
	end
end

-- Analytics

local function on_log_custom_event(self)
	-- Send a custom event to analytics network (e.g. Google Analytics)

	enhance.logCustomEvent("enhance_defold_event")
	write_log("Sending analytics event")

	-- You can also send more detailed events, for example:
	-- enhance.logCustomEvent("game_over", "level", "10")
end

-- Local Notification

local function on_schedule_local_notification_requested(self)
	-- Schedule a new local notification
	-- We need permission for that

	if not self.has_local_notification_permission then
		write_log("Permission for local notifications is not granted")
	else
	-- We have permission
	-- The local notification will appear 5 seconds after the app is deactivated
		enhance.enableLocalNotification("Enhance", "Local Notification!", 5)
		write_log("Enabling local notification")
	end
end


local function on_disable_local_notification_requested(self)
	-- Cancel previously scheduled notification

	enhance.disableLocalNotification()
	write_log("Disabling local notification")
end


function init(self)
	self.is_banner_ad_shown = false
	self.has_local_notification_permission = false

    msg.post(".", "acquire_input_focus")    
    msg.post("@render:", "clear_color", { color = vmath.vector4(1.0, 1.0, 1.0, 1.0) })

    -- Ask for permission to schedule local notifications
    -- It can be done at any point in the application

	enhance.requestLocalNotificationPermission(function(self)
	   		self.has_local_notification_permission = true
		end, function(self)
	    	self.has_local_notification_permission = false
		end
	)
end

-- Helper function to test button clicks

local function test_click(self, action, node_name, callback)
    if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
        if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(0.55, 0.55, 0.6))
        elseif action.released then
		    gui.set_scale(gui.get_node(node_name), vmath.vector3(0.6, 0.6, 0.6))
		    callback(self)
        end
    end
end

-- Handle button clicks

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		test_click(self, action, "btn_interstitial", on_show_interstitial_requested)
		test_click(self, action, "btn_rewarded", on_show_rewarded_requested)
		test_click(self, action, "btn_banner", on_toggle_banner_requested)
		test_click(self, action, "btn_offerwall", on_show_offerwall_requested)
		test_click(self, action, "btn_specialoffer", on_show_special_offer_requested)
		test_click(self, action, "btn_logevent", on_log_custom_event)
		test_click(self, action, "btn_enable_local_notification", on_schedule_local_notification_requested)
		test_click(self, action, "btn_disable_local_notification", on_disable_local_notification_requested)
	end
end
