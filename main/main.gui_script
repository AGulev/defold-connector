is_banner_ad_shown = false
has_local_notification_permission = false

function init(self)
    -- Add initialization code here
    -- Remove this function if not needed
    msg.post(".", "acquire_input_focus")
    
    -- Ask for permission to schedule local notifications
    -- It can be done at any point in the application
    
  	enhance.requestLocalNotificationPermission(function(self)
	   		has_local_notification_permission = true
		end, function(self)
	    	has_local_notification_permission = false
		end
	)
end

function update(self, dt)

end

-- Helper function to test button clicks

function test_click(action, node_name, callback)
    if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
        if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(0.55, 0.55, 0.6))
        elseif action.released then
		    gui.set_scale(gui.get_node(node_name), vmath.vector3(0.6, 0.6, 0.6))
		    callback()
        end
    end
end

-- Handle button clicks

function on_input(self, action_id, action)
	if action_id == hash("touch") then
		test_click(action, "btn_interstitial", on_show_interstitial_requested)
		test_click(action, "btn_rewarded", on_show_rewarded_requested)
		test_click(action, "btn_banner", on_toggle_banner_requested)
		test_click(action, "btn_offerwall", on_show_offerwall_requested)
		test_click(action, "btn_specialoffer", on_show_special_offer_requested)
		test_click(action, "btn_logevent", on_log_custom_event)
		test_click(action, "btn_enable_local_notification", on_schedule_local_notification_requested)
		test_click(action, "btn_disable_local_notification", on_disable_local_notification_requested)
	end
end

-- Interstitial Ad

function on_show_interstitial_requested()
	-- Check whether an interstitial ad is available
	
	if not enhance.isInterstitialReady() then
		write_log("Interstitial ad is not ready")
	else
	-- The ad is ready, set optional callback & show the ad
	
		enhance.setInterstitialCallback(on_interstitial_completed)
		enhance.showInterstitial()
		write_log("Showing interstitial ad")
	end
end

function on_interstitial_completed()
	write_log("Interstitial ad completed")
end

-- Rewarded Ad

function on_show_rewarded_requested()
	-- Check whether a rewarded ad is available
	
	if not enhance.isRewardedAdReady() then
		write_log("Rewarded ad is not ready")
	else
	-- The ad is ready, display it
	
		enhance.showRewardedAd(on_reward_granted, on_reward_declined, on_reward_unavailable)
		write_log("Showing rewarded ad")
	end
end

function on_reward_granted(self, reward_value, reward_type)
	write_log("Reward granted")
end

function on_reward_declined()
	write_log("Reward declined")
end

function on_reward_unavailable()
	write_log("Reward unavailable")
end

-- Banner Ad

function on_toggle_banner_requested()
	-- If any banner is already displayed, hide it
	
	if is_banner_ad_shown then
		is_banner_ad_shown = false
		enhance.hideBannerAd()
		write_log("Hiding banner ad")
		
	-- No banner is shown, check if any is available
	
	elseif not enhance.isBannerAdReady() then
		write_log("Banner ad is not ready")
	else
	-- Banner ad is ready, display it
	
		is_banner_ad_shown = true
		enhance.showBannerAd("bottom");
		write_log("Showing banner ad")
		
	-- This will display the ad in the bottom of the screen
	-- You can also change the position to "top"
	end
end

-- Offerwall

function on_show_offerwall_requested()
	-- Show offerwall if available
	
	if not enhance.isOfferwallReady() then
		write_log("Offerwall is not ready")
	else
		enhance.showOfferwall()
		write_log("Showing offerwall")
	end
end

-- Special Offer

function on_show_special_offer_requested() 
	-- Show special offer if available
	
	if not enhance.isSpecialOfferReady() then
		write_log("Special offer is not ready")
	else
		enhance.showSpecialOffer()
		write_log("Showing special offer")
	end
end

-- Analytics

function on_log_custom_event()
	-- Send a custom event to analytics network (e.g. Google Analytics)
	
	enhance.logCustomEvent("enhance_defold_event")
	write_log("Sending analytics event")
	
	-- You can also send more detailed events, for example:
	-- enhance.logCustomEvent("game_over", "level", "10")
end

-- Local Notification

function on_schedule_local_notification_requested() 
	-- Schedule a new local notification
	-- We need permission for that
	
	if not has_local_notification_permission then
		write_log("Permission for local notifications is not granted")
	else
	-- We have permission
	-- The local notification will appear 5 seconds after the app is deactivated
		enhance.enableLocalNotification("Enhance", "Local Notification!", 5)
		write_log("Enabling local notification")
	end
end


function on_disable_local_notification_requested()
	-- Cancel previously scheduled notification
	
	enhance.disableLocalNotification()
	write_log("Disabling local notification")
end

-- Non-enhance logic
-- Write logs to the screen
function write_log(text)
	local text_node = gui.get_node("text_log")
	gui.set_text(text_node, text)
	print(text)
end
